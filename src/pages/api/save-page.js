// src/pages/api/save-page.js
import { getUserFromRequest } from '../../lib/auth.js';
import fs from 'fs/promises';
import path from 'path';

export async function POST({ request }) {
  try {
    // Check authentication
    const user = await getUserFromRequest(request);
    if (!user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    const data = await request.json();
    
    // Save the page data (you can customize this based on your needs)
    const pageDataPath = path.join(process.cwd(), 'src/data/page-content.json');
    
    // Ensure directory exists
    await fs.mkdir(path.dirname(pageDataPath), { recursive: true });
    
    // Save the page data
    await fs.writeFile(pageDataPath, JSON.stringify(data, null, 2));

    // Optionally, generate a new index.astro file
    const astroContent = generateAstroFile(data);
    const astroPath = path.join(process.cwd(), 'src/pages/index.astro');
    await fs.writeFile(astroPath, astroContent);

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Save error:', error);
    return new Response(JSON.stringify({ error: 'Failed to save' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

function generateAstroFile(data) {
  // Generate Astro file based on the Puck data
  let content = `---
// Auto-generated by Puck Editor
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${data.root?.props?.title || 'My Site'}</title>
</head>
<body>
`;

  // Convert Puck components to HTML
  data.content?.forEach(component => {
    switch (component.type) {
      case 'Hero':
        content += `
  <section class="hero">
    <h1>${component.props.title}</h1>
    <p>${component.props.subtitle}</p>
    <a href="${component.props.buttonLink}">${component.props.buttonText}</a>
  </section>
`;
        break;
      
      case 'TextBlock':
        content += `
  <div class="text-block" style="text-align: ${component.props.alignment}">
    <p>${component.props.text}</p>
  </div>
`;
        break;
      
      case 'ImageBlock':
        content += `
  <div class="image-block">
    <img src="${component.props.src}" alt="${component.props.alt}" style="width: ${component.props.width}%" />
  </div>
`;
        break;
      
      case 'ButtonBlock':
        content += `
  <div class="button-block">
    <a href="${component.props.link}" class="btn btn-${component.props.style}">${component.props.text}</a>
  </div>
`;
        break;
    }
  });

  content += `
</body>

<style>
  .hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 4rem 2rem;
    text-align: center;
  }
  
  .hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
  }
  
  .hero p {
    font-size: 1.25rem;
    margin-bottom: 2rem;
    opacity: 0.9;
  }
  
  .hero a {
    display: inline-block;
    padding: 1rem 2rem;
    background-color: rgba(255,255,255,0.2);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    border: 2px solid rgba(255,255,255,0.3);
  }
  
  .text-block {
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .text-block p {
    line-height: 1.6;
    font-size: 1.1rem;
  }
  
  .image-block {
    padding: 1rem;
    text-align: center;
  }
  
  .image-block img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  
  .button-block {
    padding: 2rem;
    text-align: center;
  }
  
  .btn {
    padding: 1rem 2rem;
    text-decoration: none;
    border-radius: 6px;
    display: inline-block;
  }
  
  .btn-primary { background-color: #007bff; color: white; }
  .btn-secondary { background-color: #6c757d; color: white; }
  .btn-success { background-color: #28a745; color: white; }
</style>
</html>`;

  return content;
}